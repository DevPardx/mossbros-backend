# CHANGELOG
<!-- Latest on top -->

## [1.3.0] - 2025-10-19
### Added
- **Enhanced RepairJob Statistics System**: Improved business analytics with comprehensive metrics
  - Daily metrics tracking for jobs completed today and today's revenue
  - Weekly metrics for new customer acquisition tracking  
  - Enhanced statistics endpoint with time-based filtering capabilities
  - Customer entity integration in RepairJob service for cross-entity analytics

### Changed
- Enhanced getStatistics method with date-based calculations for daily and weekly insights
- Improved business intelligence capabilities with real-time performance metrics
- Updated RepairJob service with additional repository dependencies for comprehensive analytics

### Technical Improvements
- Added Customer repository integration in RepairJob service
- Implemented date boundary calculations for accurate time-based metrics
- Enhanced database query optimization with parallel execution using Promise.all()

## [1.0.0] - 2025-10-19
### Added
- **Professional README Documentation**: Complete rewrite with comprehensive project documentation
  - Professional structure with table of contents, feature overview, and technology stack table
  - Full API documentation with endpoint tables and sample requests
  - Complete installation guide with Docker and local setup options
  - Configuration examples with all environment variables
  - Database schema documentation and workflow diagrams
  - Deployment instructions for production environments
  - Business features documentation highlighting repair job workflow system

### Changed
- Updated README from basic documentation to professional standard suitable for production use
- Enhanced project presentation with markdown formatting, tables, and structured sections

## [1.0.0] - 2025-10-19
### Added
- **Complete Repair Job Management System** with comprehensive workflow implementation
  - RepairJob entity with workflow-specific fields (estimated_completion, total_cost, started_at, completed_at)
  - Six-state workflow system: PENDING → IN_REPAIR → WAITING_FOR_PARTS → READY_FOR_PICKUP → COMPLETED → CANCELLED
  - State machine pattern with transition validation and business rules enforcement
  - Automatic cost calculation based on selected services with complexity factors
  - Smart estimated completion date calculation considering service complexity
  - Workflow information endpoints for frontend integration
  - Business statistics dashboard with revenue tracking and completion rates

- **Comprehensive RepairJob API Operations**
  - Create repair jobs with service selection and motorcycle assignment
  - List repair jobs with filtering by status and motorcycle
  - Get detailed repair job information with full relations
  - Update repair job notes and estimated completion dates
  - Update repair job status with workflow validation
  - Cancel repair jobs (with state-based restrictions)
  - Delete repair jobs (only in PENDING or CANCELLED states)
  - Get workflow information for current repair job state
  - Statistics endpoint for business analytics and reporting

- **Enhanced Database Seeding System**
  - RepairJob seeding with sample data across all workflow states
  - Realistic repair scenarios with Spanish notes and proper status distribution
  - Integration with existing customer and motorcycle seed data
  - Comprehensive seeding orchestration in proper dependency order

### Changed
- Enhanced RepairJob entity with additional workflow tracking fields
- Updated server configuration to include RepairJob routes
- Modified seed system to include repair job data generation

## [1.0.0] - 2025-10-19
### Added
- **Complete Service Management System** for repair shop operations
  - Service entity with name, pricing, and activation status
  - Service controller with full CRUD operations (create, read, update, delete)
  - Service service layer with comprehensive business logic and validation
  - Service routes with authentication protection and input validation
  - Service seeding system with realistic motorcycle repair services
  - Integration with RepairJob system for service-job associations

- **Profile Management Enhancement**
  - Profile endpoint for authenticated user information retrieval
  - Enhanced authentication middleware with profile access support

- **Code Quality Improvements**
  - Comprehensive ESLint configuration and warning resolution
  - Standardized API field naming convention using snake_case
  - Enhanced TypeScript type definitions for services and repair operations
  - Improved code structure and maintainability

### Changed
- Streamlined customer and motorcycle type definitions for better consistency
- Updated authentication system to use snake_case field naming (remember_me)
- Enhanced error handling with Spanish localization for better user experience
- Removed redundant try-catch blocks in favor of centralized error handling
- Updated authentication routes to support new field naming conventions

### Fixed
- Resolved all ESLint warnings across the codebase
- Improved type safety with proper TypeScript imports
- Enhanced code consistency with standardized naming patterns

## [1.0.0] - 2025-10-19
### Added
- **Customer and Motorcycle Seeding System** with comprehensive test data
  - Customer seeding with realistic Salvadoran names, emails, and phone numbers
  - Motorcycle seeding with proper plate number format (M + 6 digits)
  - Realistic brand and model associations for motorcycles
  - Customer-motorcycle relationship creation with proper foreign key associations
  - Duplicate prevention logic to avoid re-seeding existing data
  - Enhanced seeding orchestration with proper dependency management

### Changed
- Enhanced seeding system with realistic data for development and testing
- Updated seed orchestration to include customer and motorcycle data generation
- Improved database relationships with proper entity associations

## [1.0.0] - 2025-10-19
### Added
- Complete Customer Management System with motorcycle integration
- Customer controller with full CRUD operations (create, read, update, delete)
- Customer service layer with transactional operations for data integrity
- Customer routes with comprehensive validation and authentication protection
- OneToOne relationship between Customer and Motorcycle entities for better data modeling
- TypeScript types for Customer and Motorcycle entities with proper type safety
- Enhanced validation with snake_case field naming convention for API consistency
- Customer-Motorcycle transactional creation for atomic operations

### Changed
- Enhanced error handling across all controllers (auth, brand, model, customer)
- Added try-catch blocks with proper error logging and status codes
- Updated Customer entity from OneToMany to OneToOne relationship with Motorcycle
- Updated Motorcycle entity to use OneToOne relationship with Customer
- Improved error messages with specific context for different operations
- Enhanced server configuration to include customer routes

### Fixed
- Consistent error handling patterns across all API endpoints
- Proper HTTP status codes for different error scenarios (404 for not found, 500 for server errors)
- Database relationship integrity with proper cascade operations

## [1.0.0] - 2025-10-18
### Added
- Comprehensive brand seeding system with 12 motorcycle brands
- Model seeding system with 50+ real motorcycle models across all brands
- Cloudinary CDN integration for optimized brand logo delivery
- WebP format support for brand logos with better compression
- Duplicate prevention logic in seeding to avoid re-seeding existing data
- Real motorcycle model names for authentic data representation
- Proper brand-model relationships in seed data
- Enhanced seed orchestration with automatic execution order

## [1.0.0] - 2025-10-18
### Added
- Complete CRUD API for Brand management with authentication protection
- Complete CRUD API for Model management with authentication protection
- Brand controller with create, read, update, and delete operations
- Model controller with create, read, update, and delete operations
- Brand service layer for database operations and business logic
- Model service layer for database operations and business logic
- Comprehensive validation for brand routes (name validation, URL validation)
- Comprehensive validation for model routes with UUID parameter validation
- Bearer token authentication middleware for API protection
- Spanish localization for authentication error messages
- TypeScript types for Brand and Model entities

### Changed
- Enhanced authentication middleware with Bearer token support
- Updated authentication middleware error handling with proper HTTP status codes
- Improved error messages in auth service with Spanish localization
- Renamed `Login` type to `LoginType` for better naming consistency
- Updated authentication middleware to use UnauthorizedError and NotFoundError instead of BadRequestError

## [1.0.0] - 2025-10-17
### Added
- Cookie-based authentication system with HTTP-only cookies for enhanced security
- JWT token verification functionality for protected routes
- Authentication middleware for verifying JWT tokens from cookies
- Cookie parser middleware integration for handling cookies
- Logout functionality to clear authentication cookies
- Token verification endpoint to validate user authentication status
- Enhanced CORS configuration with credentials support
- Support for "Remember Me" functionality with extended token expiration

### Changed
- Modified login endpoint to set HTTP-only cookies instead of returning JWT tokens directly
- Updated authentication service to include token verification method
- Enhanced token utilities with JWT verification function
- Improved authentication controller with logout and verify methods
- Updated authentication routes with new logout and verify endpoints
- Modified CORS configuration to support credentials for cookie-based authentication

### Dependencies
- Added `cookie-parser` package for cookie handling
- Added `@types/cookie-parser` for TypeScript support

## [1.0.0] - 2025-10-12
### Added
- Initial release of the MossBros backend with PostgreSQL and Redis services.
- Docker Compose setup for easy deployment.
- Environment configuration for database connection.
- Basic project structure and documentation.
- README file with setup instructions.
- .gitignore file to exclude unnecessary files from version control.
- Bcrypt utilities for secure password hashing.
- CORS configuration to allow requests from the frontend.
- Nodemailer setup for sending emails.
- Error handling middleware for consistent error responses.
- Validation middleware for request data validation.
- Utility functions for token generation and email sending.
- User entity and repository for managing user data.
- User seeding script to create an initial owner user.
- Logging setup for monitoring application activity.
- Authentication routes, controller and service.